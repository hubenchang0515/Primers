1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
5:I[9665,[],"MetadataBoundary"]
7:I[9665,[],"OutletBoundary"]
a:I[4911,[],"AsyncMetadataOutlet"]
c:I[9665,[],"ViewportBoundary"]
e:I[6614,[],""]
:HL["/primers/_next/static/css/2b127b79118b60e8.css","style"]
0:{"P":null,"b":"143HGXSdWqUbZ5RZ383Bt","p":"/primers","c":["","document","zh","02.Python","02.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95","04.%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6.md"],"i":false,"f":[[["",{"children":["document",{"children":[["lang","zh","d"],{"children":[["category","02.Python","d"],{"children":[["chapter","02.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95","d"],{"children":[["doc","04.%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6.md","d"],{"children":["__PAGE__",{}]}]}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/primers/_next/static/css/2b127b79118b60e8.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["document",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["lang","zh","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["category","02.Python","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["chapter","02.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["doc","04.%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6.md","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","7s8u91Y4x-Igv1QeMBUzz",{"children":[["$","$Lc",null,{"children":"$Ld"}],null]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[4911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Primers - 编程伙伴"}],["$","meta","1",{"name":"description","content":"欢迎来到 Primers ———— 你的编程学习伙伴。Primers 致力于为各类编程学习者提供全面、系统的编程教程和实践资源。无论你是编程新手，还是有一定基础的开发者，Primers 都提供了适合的学习路径和丰富的实战项目，帮助你从零开始，逐步掌握编程技能，成为一名优秀的开发者。"}],["$","link","2",{"rel":"icon","href":"/primers/icon.svg"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
12:I[5890,["614","static/chunks/614-e9c305f8f4dd1a75.js","295","static/chunks/295-4c756653e19e85be.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-79411bbd912f2ee9.js"],"default"]
13:I[785,["614","static/chunks/614-e9c305f8f4dd1a75.js","295","static/chunks/295-4c756653e19e85be.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-79411bbd912f2ee9.js"],"default"]
14:T140e,# 循环控制

在编写程序时，我们经常需要重复执行同一段代码。例如在游戏中释放了一个持续的治疗技能，效果是一段时间内不断的回血，总计回复十次。

这样的写法显然不合适：  

```python
hp:int = 10

# 治疗
hp += 1
hp += 1
hp += 1
hp += 1
hp += 1
hp += 1
hp += 1
hp += 1
hp += 1
hp += 1
```

此时就需要使用循环来优化代码，Python 有两种循环语法，分别由 `while` 和 `for` 控制。

## while 循环

参考：[Python 官方文档](https://docs.python.org/3/reference/compound_stmts.html#the-while-statement)

`while` 循环的结构如下：  

```python
while 循环条件
    循环体
```

```graphviz
digraph G {
  node [fontname="Helvetica", shape=box];

  start [label="开始", shape=ellipse];
  condition [label="循环判断", shape=diamond];
  loop_body [label="循环体"];
  end [label="结束", shape=ellipse];

  start -> condition;
  condition -> loop_body [label="是"];
  loop_body -> condition;  
  condition -> end [label="否"];
}
```

只要 *条件* 为 True，就循环执行 *循环体代码块*，直到 *条件* 为 False 时结束循环，继续执行后面的代码。

例如：  

```python shift
hp:int = 10
times:int = 10

# 治疗
while times > 0:
    print("恢复 1 点 HP，当前 HP 为", hp)
    hp += 1
    times -= 1

print("最终 HP 为", hp)
```

## for 循环

参考：[Python 官方文档](https://docs.python.org/3/reference/compound_stmts.html#the-for-statement)

`for` 循环的结构如下：  

```python
for 循环变量 in 可迭代对象:
    循环体
```

循环会不断从 *可迭代对象* 中取出值赋值给 *循环变量* 并执行 *循环体*，直到 *可迭代对象* 的值被取完时结束循环，继续执行后面的代码。

> 可迭代对象将在后面学习，请暂时放下。

例如：  

```python shift
hp:int = 10

# 治疗
for _ in range(10):
    print("恢复 1 点 HP，当前 HP 为", hp)
    hp += 1

print("最终 HP 为", hp)
```

* 这里的 `range` 是一个内建函数，他会返回一个可迭代对象，依次得到 0 至 n-1，此处为 0 至 9。
* 由于我们只需要循环 10 次，而不需要迭代的值，因此使用特殊变量 `_` 来接收。

## range 函数

`range` 函数十分常用，它由三种用法：

```python
range(stop)                 # 迭代对象依次得到 0 至 stop，不含 stop 本身，每次递增 1
range(start, stop)          # 迭代对象依次得到 start 至 stop，不含 stop 本身，每次递增 1
range(start, stop, step)    # 迭代对象依次得到 start 至 stop，不含 stop 本身，每次递增 step
```

示例：  

```python shift
for num in range(10):
    print(num, end=", ") # 通过 end 参数替换掉结尾默认的换行
print("")                # 打印空字符串，结尾默认换行

for num in range(5, 10):
    print(num, end=", ")
print("")

for num in range(5, 10, 3):
    print(num, end=", ")
print("")
```

## break 和 continue

在循环中有两个是否常用的操作，`break` 和 `continue`。  
* `break` 的作用是提前结束整个循环
* `continue` 的作用是结束本轮循环，进入下一轮循环。

例如，我们的生命值上限是 15 点，如果生命值已经达到了上限就不应该继续治疗了。  

可以在生命值达到上限时通过 `break` 结束治疗：  

```python shift
MAX_HP:int = 15
hp:int = 10

# 治疗
for _ in range(10):
    print("恢复 1 点 HP，当前 HP 为", hp)
    if hp >= MAX_HP: # 如果 hp 已经满了就结束治疗
        break
    hp += 1

print("最终 HP 为", hp)
```

这种方式下，如果在持续时间内玩家会受到伤害，由于治疗技能已经提前结束了，因此无法进行恢复。

另一种方式是在生命值达到上限时通过 `continue` 跳过本次回复：  

```python shift
MAX_HP:int = 15
hp:int = 10

# 治疗
for _ in range(10):
    print("恢复 1 点 HP，当前 HP 为", hp)
    if hp >= MAX_HP: # 如果 hp 已经满了就跳过本次
        continue
    hp += 1

print("最终 HP 为", hp)
```

这种方式下，如果在持续时间内玩家会受到伤害，治疗技能将在下一次回复时恢复生命值。

## 循环中的 else

Python 可以在循环后接 `else`，它的代码块将在循环结束时执行，但通过 `break` 结束循环时不执行 `else` 的代码块。  
如果循环条件从一开始就是 `False`（或者可迭代对象是空的），也会执行 `else` 的代码块。

```python
while 条件:
    循环体代码块
else:
    代码块
```

```python
for 循环变量 in 可迭代对象:
    循环体代码块
else:
    代码块
```

## 练习

请实现判断一个正整数是否是质数，通过 `input` 获取输入。

* 特别规定 1 不是质数。
* 只能被 1 和自己整除的正整数是质数，否则不是。

```python shift 2389
number:int = int(input("请输入一个整数："))
is_prime:bool = False

# 请在此处实现代码，如果 number 是质数就将 is_prime 改为 True


if is_prime:
    print(number, "是质数")
else:
    print(number, "不是质数")
```4:["$","$L12",null,{"titleItems":[{"label":"Python","url":"/document/zh/02.Python"},{"label":"通识基础","url":"/document/zh/99.通识基础"}],"currentTitle":0,"sideItems":[{"label":"预备","items":[{"label":"Python 的简介与安装","url":"/document/zh/02.Python/01.预备/00.Python 的简介与安装.md"},{"label":"第一行代码","url":"/document/zh/02.Python/01.预备/01.第一行代码.md"}]},{"label":"基础语法","items":[{"label":"变量与基本类型","url":"/document/zh/02.Python/02.基础语法/00.变量与基本类型.md"},{"label":"基本运算","url":"/document/zh/02.Python/02.基础语法/01.基本运算.md"},{"label":"标准输入与类型转换","url":"/document/zh/02.Python/02.基础语法/02.标准输入与类型转换.md"},{"label":"条件控制","url":"/document/zh/02.Python/02.基础语法/03.条件控制.md"},{"label":"循环控制","url":"/document/zh/02.Python/02.基础语法/04.循环控制.md"},{"label":"模式匹配","url":"/document/zh/02.Python/02.基础语法/05.模式匹配.md"},{"label":"课后练习","url":"/document/zh/02.Python/02.基础语法/99.课后练习.md"}]},{"label":"容器类型","items":[{"label":"说明","url":"/document/zh/02.Python/03.容器类型/00.说明.md"},{"label":"元组 tuple","url":"/document/zh/02.Python/03.容器类型/01.元组 tuple.md"},{"label":"列表 list","url":"/document/zh/02.Python/03.容器类型/02.列表 list.md"},{"label":"切片操作","url":"/document/zh/02.Python/03.容器类型/03.切片操作.md"},{"label":"字典 dict","url":"/document/zh/02.Python/03.容器类型/04.字典 dict.md"},{"label":"集合 set","url":"/document/zh/02.Python/03.容器类型/05.集合 set.md"},{"label":"容器迭代","url":"/document/zh/02.Python/03.容器类型/06.容器迭代.md"},{"label":"解包操作","url":"/document/zh/02.Python/03.容器类型/07.解包操作.md"},{"label":"模式匹配","url":"/document/zh/02.Python/03.容器类型/08.模式匹配.md"}]}],"currentSide":1,"children":["$","$L13",null,{"maxWidth":"lg","children":"$14"}]}]
