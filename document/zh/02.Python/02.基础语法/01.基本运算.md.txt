1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
5:I[9665,[],"MetadataBoundary"]
7:I[9665,[],"OutletBoundary"]
a:I[4911,[],"AsyncMetadataOutlet"]
c:I[9665,[],"ViewportBoundary"]
e:I[6614,[],""]
:HL["/primers/_next/static/css/2b127b79118b60e8.css","style"]
0:{"P":null,"b":"CFLjSabmNRZFDNu6VQlX0","p":"/primers","c":["","document","zh","02.Python","02.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95","01.%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97.md"],"i":false,"f":[[["",{"children":["document",{"children":[["lang","zh","d"],{"children":[["category","02.Python","d"],{"children":[["chapter","02.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95","d"],{"children":[["doc","01.%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97.md","d"],{"children":["__PAGE__",{}]}]}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/primers/_next/static/css/2b127b79118b60e8.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["document",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["lang","zh","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["category","02.Python","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["chapter","02.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["doc","01.%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97.md","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",["$","$L5",null,{"children":"$L6"}],null,["$","$L7",null,{"children":["$L8","$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","zwPPuaVCh3urdwbbwMoBJ",{"children":[["$","$Lc",null,{"children":"$Ld"}],null]}],null]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:"$Sreact.suspense"
10:I[4911,[],"AsyncMetadata"]
6:["$","$f",null,{"fallback":null,"children":["$","$L10",null,{"promise":"$@11"}]}]
9:null
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
11:{"metadata":[["$","title","0",{"children":"Primers - 编程伙伴"}],["$","meta","1",{"name":"description","content":"欢迎来到 Primers ———— 你的编程学习伙伴。Primers 致力于为各类编程学习者提供全面、系统的编程教程和实践资源。无论你是编程新手，还是有一定基础的开发者，Primers 都提供了适合的学习路径和丰富的实战项目，帮助你从零开始，逐步掌握编程技能，成为一名优秀的开发者。"}],["$","link","2",{"rel":"icon","href":"//primers/icon.svg"}]],"error":null,"digest":"$undefined"}
b:{"metadata":"$11:metadata","error":null,"digest":"$undefined"}
12:I[9510,["861","static/chunks/861-ef9180b225282d08.js","295","static/chunks/295-a22276e4a6ce479a.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-4518ff7f26366253.js"],"default"]
13:I[785,["861","static/chunks/861-ef9180b225282d08.js","295","static/chunks/295-a22276e4a6ce479a.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-4518ff7f26366253.js"],"default"]
14:T241b,# 基本运算

运算就是用值来做各种变化的游戏，例如 `1 + 1` 得到 `2`，其中 `+` 是加法的**运算符**。

!class: view-message-warning
Python 的所有运算符都是英文字符，输入法自动输入中文符号新手常见的错误，请注意区分。

关于运算符，请参考 [Python 官方文档 - 运算符](https://docs.python.org/zh-cn/3/reference/lexical_analysis.html#operators)

## 赋值运算符

Python 使用 `=` 作为赋值运算符，用于修改变量的值，而非数学中的“等于”。  
此外还还可以使用 `count += 1` 作为 `count = count + 1` 的简写，其中 `+` 可以替换为任意算术运算符。  

```python shift
count:int = 0    # 创建变量 count，值为 0
print(count)

count = 4        # 将 count 的值修改为 4
print(count)

count += 3       # 将 count 的值修改为 count + 3
print(count)
```

### 动态类型

Python 中变量创建后可以给他赋值其它类型的的值：  

``` python
age_of_yukari:int = 17      # 类型为 int
age_of_yukari = "17"        # 类型为 str
```

但是建议 **不要修改变量的类型**。

### 海象运算符

海象运算符（`:=`）是一种特殊的赋值运算符，它不能直接用于给变量赋值，只能在表达式内赋值。例如：

```python
x:int = 0
y:int = 0
sum_squares:int = x**2 + y**2

# 传统做法
x = 5
y = 10
sum_squares = x**2 + y**2

# 使用海象运算符
sum_squares = (x := 5)**2 + (y := 10)**2
```

并且，赋值运算符（`=`）没有返回值，无法作为 `if`、`while` 等控制块的条件，而海象运算符（`:=`）可以。

!class: view-message-warning
使用海象运算符（`:=`）需要 Python 版本 $\geq$ 3.8

## 算术运算符

| 运算符  | 名称      | 示例      | 结果   | 说明                                                                      |
| :-     | :-        | :-        | :-    | :-                                                                        | 
| `+`    | 加法运算符 | `3 + 5`   | `7`   |                                                                           |
| `-`    | 减法运算符 | `5 - 3`   | `2`   |                                                                           |
| `*`    | 乘法运算符 | `5 * 3`   | `15`  |                                                                           |
| `/`    | 除法运算符 | `5 / 2`   | `2.5` | 无论能否整除，结果类型都是浮点型                                             |
| `//`   | 整除运算符 | `5 // 2 ` | `2`   | 结果向下取整，如果被除数和除数都是整型，则结果为整型，否则结果为浮点型           |
| `%`    | 取余运算符 | `5 % 2`   | `1`   | 5 除以 2，得 2 余 1                                                        |
| `**`   | 乘方运算符 | `5 ** 2`  | `25`  | 5 的 2 次方                                                               |

## 比较运算符

用于比较两个值的关系，结果为布尔类型。

| 运算符  | 名称           | 示例        | 结果     |
| :-     | :-             | :-         | :-       |
| `==`   | 等于运算符      | `3 == 5`   | `False`  |
| `!=`   | 不等于运算符    | `3 != 5`   | `True`   |
| `>`    | 大于运算符      | `5 > 3`    | `True`   |
| `<`    | 小于运算符      | `5 < 2`    | `False`  | 
| `>=`   | 大于或等于运算符 | `5 >= 5 `  | `True`  | 
| `<=`   | 小于或等于运算符 | `5 <= 2`   | `False` | 

## 逻辑运算符

用于组合多个布尔值。

| 运算符 | 名称         |  示例            | 结果     | 说明                                              |
| :-     | :-          | :-               | :-      | :-                                                |
| and    | 逻辑与运算符 | `True and False` | `False` | 全部为 `True` 时结果为 `True`，否则结果为 `False`   |
| or     | 逻辑或运算符 | `True or False`  | `True`  | 全部为 `False` 时结果为 `False`，否则结果为 `True`  |
| not    | 逻辑非运算符 | `not False`      | `True`  | 将一个布尔值反转                                   |

## 位运算符

位运算用于对整数进行二进制操作。

| <div style="width:4em">运算符</div> | <div style="width:6em">名称</div> | <div style="width:10em">示例</div> | <div style="width:4em">结果</div> | 说明                                                                            |
| :-                                 | :-                                | :-                                | :-                                | :-                                                                              |
| `&`                                | 位与运算符                         | `0b1100 & 0b0110`                 | `0b0100`                          | 按二进制位进行计算，两个数在某一位上都是 `1`，则结果在该位为 `1`，否则结果在该位为 `0` |
| `&vert;`                           | 位与运算符                         | `0b1100 &vert; 0b0110`            | `0b1110`                          | 按二进制位进行计算，两个数在某一位上都是 `0`，则结果在该位为 `0`，否则结果在该位为 `1` |
| `^`                                | 异或运算符                         | `0b1100 ^ 0b0110`                 | `0b1010`                          | 二进制中不同的位结果为 `1`，相同的位结果位 `0`                                     |
| `<<`                               | 左移运算符                         | `0b0011 << 2`                     | `0b1100`                          | 二进制位向左移动，右侧补 `0`                                                      |
| `>>`                               | 右移运算符                         | `0b1100 >> 1`                     | `0b0110`                          | 二进制位向右移动，左侧补 `0`                                                      |
| `~`                                | 取反运算符                         | `~0b1100`                         | `0b0011`                          | 二进制位取反，即 `1` 变为 `0`，`0` 变为 `1`                                       |

## 优先级

运算符存在优先级，和数学一样先乘除，后加减。例如 `3 + 5 * 2` 结果为 `13`。  
括号为最高优先级，可以使用括号改变计算顺序。例如 `(3 + 5) * 2` 结果为 `16`。

下表为优先级列表，优先级由高到低：  

> 没有必要记住，大部分符合直觉，拿不准时请使用括号。  
> 部分运算符目前还没有学习，请暂时放下，将在后面的章节中学习。  

参考：[Python 官方文档](https://docs.python.org/3/reference/expressions.html#operator-precedence)

| 运算符                                                             |  说明                |      |
| :-                                                                | :-                   | :-   |
| `(exp)`, `[exp]`, `{exp}`                                         | 括号表达式            | 最高  |
| `arr[i]`, `arr[i:j]`, `func(args)`, `obj.attr`                    | 索引，切片，调用，访问 |       |
| `await exp`                                                       | await 表达式          |       |
| `**`                                                              | 乘方                 |        |
| `+num`, `-num`, `~num`                                            | 正号、负号、取反      |        |
| `*`, `@`, `/`, `//`, `%`                                          | 乘除运算             |        |
| `+`, `-`                                                          | 加减运算             |        |
| `<<`, `>>`                                                        | 移位运算             |        |
| `&`                                                               | 位与                 |        |
| `^`                                                               | 异或                 |        |
| `&vert;`                                                          | 位或                 |        |
| `in`, `not in`, `is`, `is not`, `<`, `<=`, `>`, `>=`, `!=`, `==`  | 判断比较             |        |
| `not exp`                                                         | 逻辑非               |        |
| `and`                                                             | 逻辑与               |        |
| `or`                                                              | 逻辑或               |        |
| `lambda`                                                          | lambda 表达式        |        |
| `:=`                                                              | 赋值                 | 最低   |


## 练习

请实现计算圆形的周长和面积。

* 圆的周长公式为 $C = 2 \pi r$

* 圆的面积公式为 $S = \pi r^2$

```python shift
PI:float = 3.1415926    # 圆周率
radius:float = 15       # 半径

perimeter:float = 0     # 修改此处代码，计算周长
area:float = 0          # 修改此处代码，计算面积

print("半径为", radius, "的圆，周长为", perimeter, "面积为", area)
```4:["$","$L12",null,{"titleItems":[{"label":"Python","url":"/document/zh/02.Python"},{"label":"通识基础","url":"/document/zh/99.通识基础"}],"currentTitle":0,"sideItems":[{"label":"预备","items":[{"label":"Python 的简介与安装","url":"/document/zh/02.Python/01.预备/00.Python 的简介与安装.md"},{"label":"第一行代码","url":"/document/zh/02.Python/01.预备/01.第一行代码.md"}]},{"label":"基础语法","items":[{"label":"变量与基本类型","url":"/document/zh/02.Python/02.基础语法/00.变量与基本类型.md"},{"label":"基本运算","url":"/document/zh/02.Python/02.基础语法/01.基本运算.md"},{"label":"标准输入与类型转换","url":"/document/zh/02.Python/02.基础语法/02.标准输入与类型转换.md"},{"label":"条件控制","url":"/document/zh/02.Python/02.基础语法/03.条件控制.md"},{"label":"循环控制","url":"/document/zh/02.Python/02.基础语法/04.循环控制.md"},{"label":"模式匹配","url":"/document/zh/02.Python/02.基础语法/05.模式匹配.md"},{"label":"课后练习","url":"/document/zh/02.Python/02.基础语法/99.课后练习.md"}]},{"label":"容器类型","items":[{"label":"说明","url":"/document/zh/02.Python/03.容器类型/00.说明.md"},{"label":"元组 tuple","url":"/document/zh/02.Python/03.容器类型/01.元组 tuple.md"},{"label":"列表 list","url":"/document/zh/02.Python/03.容器类型/02.列表 list.md"},{"label":"切片操作","url":"/document/zh/02.Python/03.容器类型/03.切片操作.md"},{"label":"字典 dict","url":"/document/zh/02.Python/03.容器类型/04.字典 dict.md"},{"label":"集合 set","url":"/document/zh/02.Python/03.容器类型/05.集合 set.md"},{"label":"容器迭代","url":"/document/zh/02.Python/03.容器类型/06.容器迭代.md"},{"label":"解包操作","url":"/document/zh/02.Python/03.容器类型/07.解包操作.md"},{"label":"模式匹配","url":"/document/zh/02.Python/03.容器类型/08.模式匹配.md"}]}],"currentSide":1,"children":["$","$L13",null,{"maxWidth":"lg","children":"$14"}]}]
