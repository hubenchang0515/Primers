1:"$Sreact.fragment"
2:I[4116,["364","static/chunks/364-ff5ef27fa9e98017.js","972","static/chunks/972-6237aa9dadbd6a6c.js","177","static/chunks/app/layout-f5e831e6fa588f36.js"],"default"]
3:I[8309,["364","static/chunks/364-ff5ef27fa9e98017.js","972","static/chunks/972-6237aa9dadbd6a6c.js","177","static/chunks/app/layout-f5e831e6fa588f36.js"],"default"]
4:I[5908,["364","static/chunks/364-ff5ef27fa9e98017.js","972","static/chunks/972-6237aa9dadbd6a6c.js","177","static/chunks/app/layout-f5e831e6fa588f36.js"],"default"]
5:I[6476,["364","static/chunks/364-ff5ef27fa9e98017.js","972","static/chunks/972-6237aa9dadbd6a6c.js","177","static/chunks/app/layout-f5e831e6fa588f36.js"],"GlobalStateProvider"]
6:I[7555,[],""]
7:I[1295,[],""]
8:I[6259,["364","static/chunks/364-ff5ef27fa9e98017.js","972","static/chunks/972-6237aa9dadbd6a6c.js","177","static/chunks/app/layout-f5e831e6fa588f36.js"],"GoogleAnalytics"]
a:I[9665,[],"MetadataBoundary"]
c:I[9665,[],"OutletBoundary"]
f:I[4911,[],"AsyncMetadataOutlet"]
11:I[9665,[],"ViewportBoundary"]
13:I[6614,[],""]
:HL["/primers/_next/static/css/f1209e3eec1749df.css","style"]
:HL["/primers/_next/static/css/d6a2d70ba0f398d1.css","style"]
0:{"P":null,"b":"DdZtTuWK7KJW__3fHVRnG","p":"/primers","c":["","document","zh","02.Python","05.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1","05.%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81.md"],"i":false,"f":[[["",{"children":["document",{"children":[["lang","zh","d"],{"children":[["category","02.Python","d"],{"children":[["chapter","05.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1","d"],{"children":[["doc","05.%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81.md","d"],{"children":["__PAGE__",{}]}]}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/primers/_next/static/css/f1209e3eec1749df.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"suppressHydrationWarning":true,"children":[["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"theme":"$4","children":[[["$","script","mui-color-scheme-init",{"suppressHydrationWarning":true,"nonce":"$undefined","dangerouslySetInnerHTML":{"__html":"(function() {\ntry {\n  let colorScheme = '';\n  const mode = localStorage.getItem('mui-mode') || 'system';\n  const dark = localStorage.getItem('mui-color-scheme-dark') || 'dark';\n  const light = localStorage.getItem('mui-color-scheme-light') || 'light';\n  if (mode === 'system') {\n    // handle system mode\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      colorScheme = dark\n    } else {\n      colorScheme = light\n    }\n  }\n  if (mode === 'light') {\n    colorScheme = light;\n  }\n  if (mode === 'dark') {\n    colorScheme = dark;\n  }\n  if (colorScheme) {\n    document.documentElement.classList.remove('%s'.replace('%s', light), '%s'.replace('%s', dark));\n      document.documentElement.classList.add('%s'.replace('%s', colorScheme));document.documentElement.setAttribute('.%s', colorScheme);\n  }\n} catch(e){}})();"}}]],["$","$L5",null,{"children":["$","$L6",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]}]}],["$","$L8",null,{"gaId":"G-HEWPX7E6EV"}]]}]]}],{"children":["document",["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["lang","zh","d"],["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["category","02.Python","d"],["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["chapter","05.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1","d"],["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["doc","05.%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81.md","d"],["$","$1","c",{"children":[null,["$","$L6",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L9",["$","$La",null,{"children":"$Lb"}],[["$","link","0",{"rel":"stylesheet","href":"/primers/_next/static/css/d6a2d70ba0f398d1.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$Lc",null,{"children":["$Ld","$Le",["$","$Lf",null,{"promise":"$@10"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","EGQmbsJMtJh4_ejR3WK2r",{"children":[["$","$L11",null,{"children":"$L12"}],null]}],null]}],false]],"m":"$undefined","G":["$13","$undefined"],"s":false,"S":true}
14:"$Sreact.suspense"
15:I[4911,[],"AsyncMetadata"]
b:["$","$14",null,{"fallback":null,"children":["$","$L15",null,{"promise":"$@16"}]}]
e:null
12:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
16:{"metadata":[["$","title","0",{"children":"Python 面向对象 继承和多态 - Primers 编程伙伴"}],["$","meta","1",{"name":"description","content":"# Python 的继承和多态 **继承** 是基于已有的类创建新类的语法，被继承的类称为 **父类**，创建的新类称为 **子类**。子类自动拥有父类相同的属性和方法。```pythonclass 类名(父类名):    pass```> 父类也称基类、超类，子类也称派生类。例如：```pytho"}],["$","link","2",{"rel":"canonical","href":"https://xplanc.org/primers/document/zh/02.Python/05.面向对象/05.继承和多态.md"}],["$","link","3",{"rel":"icon","href":"/primers/icon.svg"}]],"error":null,"digest":"$undefined"}
10:{"metadata":"$16:metadata","error":null,"digest":"$undefined"}
17:I[6684,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
18:I[3267,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
19:I[8534,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
1a:I[6384,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
1b:I[8464,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
1c:I[4028,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
1d:I[5712,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
1e:I[8407,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
1f:I[7068,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
20:I[1759,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
21:I[8015,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
22:I[5129,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
31:I[444,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
9:["$","$L17",null,{"lang":"zh","depth":3,"titleItems":[{"label":"Python","url":"/document/zh/02.Python"},{"label":"HTML","url":"/document/zh/03.HTML"},{"label":"C","url":"/document/zh/06.C"},{"label":"通识基础","url":"/document/zh/99.通识基础"}],"currentTitle":0,"sideGroups":[{"label":"预备","items":[{"label":"Python 的简介与安装","url":"/document/zh/02.Python/01.预备/00.Python 的简介与安装.md"},{"label":"第一行代码","url":"/document/zh/02.Python/01.预备/01.第一行代码.md"}]},{"label":"基础语法","items":[{"label":"变量与基本类型","url":"/document/zh/02.Python/02.基础语法/00.变量与基本类型.md"},{"label":"基本运算","url":"/document/zh/02.Python/02.基础语法/01.基本运算.md"},{"label":"标准输入与类型转换","url":"/document/zh/02.Python/02.基础语法/02.标准输入与类型转换.md"},{"label":"条件控制","url":"/document/zh/02.Python/02.基础语法/03.条件控制.md"},{"label":"循环控制","url":"/document/zh/02.Python/02.基础语法/04.循环控制.md"},{"label":"模式匹配","url":"/document/zh/02.Python/02.基础语法/05.模式匹配.md"},{"label":"异常处理","url":"/document/zh/02.Python/02.基础语法/06.异常处理.md"},{"label":"模块","url":"/document/zh/02.Python/02.基础语法/07.模块.md"},{"label":"课后练习","url":"/document/zh/02.Python/02.基础语法/99.课后练习.md"}]},{"label":"容器类型","items":[{"label":"说明","url":"/document/zh/02.Python/03.容器类型/00.说明.md"},{"label":"元组 tuple","url":"/document/zh/02.Python/03.容器类型/01.元组 tuple.md"},{"label":"列表 list","url":"/document/zh/02.Python/03.容器类型/02.列表 list.md"},{"label":"切片操作","url":"/document/zh/02.Python/03.容器类型/03.切片操作.md"},{"label":"字典 dict","url":"/document/zh/02.Python/03.容器类型/04.字典 dict.md"},{"label":"集合 set","url":"/document/zh/02.Python/03.容器类型/05.集合 set.md"},{"label":"容器迭代","url":"/document/zh/02.Python/03.容器类型/06.容器迭代.md"},{"label":"解包操作","url":"/document/zh/02.Python/03.容器类型/07.解包操作.md"},{"label":"模式匹配","url":"/document/zh/02.Python/03.容器类型/08.模式匹配.md"},{"label":"推导式","url":"/document/zh/02.Python/03.容器类型/09.推导式.md"},{"label":"字符串","url":"/document/zh/02.Python/03.容器类型/10.字符串.md"}]},{"label":"函数","items":[{"label":"创建和调用函数","url":"/document/zh/02.Python/04.函数/00.创建和调用函数.md"},{"label":"作用域","url":"/document/zh/02.Python/04.函数/01.作用域.md"},{"label":"函数的递归调用","url":"/document/zh/02.Python/04.函数/02.函数的递归调用.md"},{"label":"函数的默认参数","url":"/document/zh/02.Python/04.函数/03.函数的默认参数.md"},{"label":"函数的关键字参数","url":"/document/zh/02.Python/04.函数/04.函数的关键字参数.md"},{"label":"函数的可变参数","url":"/document/zh/02.Python/04.函数/05.函数的可变参数.md"},{"label":"匿名函数","url":"/document/zh/02.Python/04.函数/06.匿名函数.md"},{"label":"装饰器","url":"/document/zh/02.Python/04.函数/07.装饰器.md"}]},{"label":"面向对象","items":[{"label":"面向对象的说明","url":"/document/zh/02.Python/05.面向对象/00.面向对象的说明.md"},{"label":"创建类和对象","url":"/document/zh/02.Python/05.面向对象/01.创建类和对象.md"},{"label":"成员的可见性","url":"/document/zh/02.Python/05.面向对象/03.成员的可见性.md"},{"label":"类的公共成员","url":"/document/zh/02.Python/05.面向对象/04.类的公共成员.md"},{"label":"继承和多态","url":"/document/zh/02.Python/05.面向对象/05.继承和多态.md"},{"label":"迭代器和可迭代对象","url":"/document/zh/02.Python/05.面向对象/06.迭代器和可迭代对象.md"},{"label":"生成器","url":"/document/zh/02.Python/05.面向对象/07.生成器.md"}]},{"label":"输入输出","items":[{"label":"文件读写","url":"/document/zh/02.Python/06.输入输出/00.文件读写.md"},{"label":"内存IO","url":"/document/zh/02.Python/06.输入输出/01.内存IO.md"},{"label":"异步IO","url":"/document/zh/02.Python/06.输入输出/02.异步IO.md"}]},{"label":"进程控制","items":[{"label":"创建进程","url":"/document/zh/02.Python/07.进程控制/00.创建进程.md"},{"label":"进程间通信","url":"/document/zh/02.Python/07.进程控制/01.进程间通信.md"},{"label":"进程池","url":"/document/zh/02.Python/07.进程控制/02.进程池.md"}]},{"label":"线程控制","items":[{"label":"创建线程","url":"/document/zh/02.Python/08.线程控制/00.创建线程.md"},{"label":"线程同步","url":"/document/zh/02.Python/08.线程控制/01.线程同步.md"},{"label":"可重入锁","url":"/document/zh/02.Python/08.线程控制/02.可重入锁.md"},{"label":"条件变量","url":"/document/zh/02.Python/08.线程控制/03.条件变量.md"},{"label":"线程池","url":"/document/zh/02.Python/08.线程控制/04.线程池.md"}]},{"label":"正则表达式","items":[{"label":"说明","url":"/document/zh/02.Python/09.正则表达式/00.说明.md"},{"label":"使用","url":"/document/zh/02.Python/09.正则表达式/01.使用.md"},{"label":"常用的正则表达式","url":"/document/zh/02.Python/09.正则表达式/02.常用的正则表达式.md"}]},{"label":"网络编程","items":[{"label":"TCP","url":"/document/zh/02.Python/10.网络编程/01.TCP.md"},{"label":"UDP","url":"/document/zh/02.Python/10.网络编程/02.UDP.md"}]},{"label":"图形界面","items":[{"label":"简介","url":"/document/zh/02.Python/11.图形界面/00.简介.md"},{"label":"Qt","url":"/document/zh/02.Python/11.图形界面/01.Qt.md"},{"label":"Qt Theme","url":"/document/zh/02.Python/11.图形界面/02.Qt Theme.md"}]},{"label":"常见问题","items":[{"label":"在线环境","url":"/document/zh/02.Python/98.常见问题/00.在线环境.md"},{"label":"在 nohup 中没有打印","url":"/document/zh/02.Python/98.常见问题/01.在 nohup 中没有打印.md"}]},{"label":"API 帮助手册","items":[{"label":"内建函数","url":"/document/zh/02.Python/99.API 帮助手册/00.内建函数.md"},{"label":"内置模块","url":"/document/zh/02.Python/99.API 帮助手册/01.内置模块.md"}]}],"selectedSideGroup":4,"selectedDoc":4,"children":[["$","$L18",null,{"sx":{"display":{"xs":"none","md":"block"}},"children":["$","$L18",null,{"sx":{"display":"flex","gap":1,"flexDirection":{"xs":"column","md":"row"}},"children":[["$","$L19",null,{"variant":"contained","color":"info","disableElevation":true,"LinkComponent":"$1a","href":"/document/zh/02.Python/05.面向对象/04.类的公共成员.md","sx":{"flex":1,"justifyContent":"space-between"},"startIcon":["$","$L1b",null,{}],"endIcon":["$","$L1c",null,{}],"children":["$","$L18",null,{"sx":{"flexShrink":1,"whiteSpace":"nowrap","overflow":"hidden","textOverflow":"ellipsis"},"children":["Python"," / ","面向对象"," / ","类的公共成员"]}]}],["$","$L19",null,{"variant":"contained","color":"info","disableElevation":true,"LinkComponent":"$1a","href":"/document/zh/02.Python/05.面向对象/06.迭代器和可迭代对象.md","sx":{"flex":1,"justifyContent":"space-between"},"startIcon":["$","$L1c",null,{}],"endIcon":["$","$L1d",null,{}],"children":["$","$L18",null,{"sx":{"flexShrink":1,"whiteSpace":"nowrap","overflow":"hidden","textOverflow":"ellipsis"},"children":["Python"," / ","面向对象"," / ","迭代器和可迭代对象"]}]}]]}]}],["$","$L1e",null,{"sx":{"padding":"1rem"},"children":["$","$L18",null,{"children":[["$","$L1f",null,{"direction":"row","spacing":1,"sx":{"color":"#bbb"},"children":[["$","$L20",null,{}],["$","$L21",null,{"children":["约"," ",2346," ","字"]}],["$","$L22",null,{}],["$","$L21",null,{"children":["约"," ",12," ","分钟"," "]}]]}],["$L23","\n","$L24","\n","$L25","\n","$L26","\n","$L27","\n","$L28","\n","$L29","\n","$L2a","\n","$L2b","\n","$L2c","\n","$L2d","\n","$L2e","\n","$L2f","\n","$L30"],["$","$L1f",null,{"direction":"row","spacing":1,"sx":{"color":"#bbb","marginTop":"1rem"},"children":[["$","$L31",null,{}],["$","$L21",null,{"children":["创建于"," ","2025/5/7"]}],["$","$L21",null,{"children":["更新于"," ","2025/5/21"]}]]}]]}]}],["$","$L18",null,{"sx":"$undefined","children":["$","$L18",null,{"sx":{"display":"flex","gap":1,"flexDirection":{"xs":"column","md":"row"}},"children":[["$","$L19",null,{"variant":"contained","color":"info","disableElevation":true,"LinkComponent":"$1a","href":"/document/zh/02.Python/05.面向对象/04.类的公共成员.md","sx":{"flex":1,"justifyContent":"space-between"},"startIcon":["$","$L1b",null,{}],"endIcon":["$","$L1c",null,{}],"children":["$","$L18",null,{"sx":{"flexShrink":1,"whiteSpace":"nowrap","overflow":"hidden","textOverflow":"ellipsis"},"children":["Python"," / ","面向对象"," / ","类的公共成员"]}]}],["$","$L19",null,{"variant":"contained","color":"info","disableElevation":true,"LinkComponent":"$1a","href":"/document/zh/02.Python/05.面向对象/06.迭代器和可迭代对象.md","sx":{"flex":1,"justifyContent":"space-between"},"startIcon":["$","$L1c",null,{}],"endIcon":["$","$L1d",null,{}],"children":["$","$L18",null,{"sx":{"flexShrink":1,"whiteSpace":"nowrap","overflow":"hidden","textOverflow":"ellipsis"},"children":["Python"," / ","面向对象"," / ","迭代器和可迭代对象"]}]}]]}]}]]}]
24:["$","$L21","p-0",{"variant":"body1","className":"$undefined","sx":{"fontSize":"1rem","fontWeight":"normal","marginBlock":"8px"},"children":[["$","strong","strong-0",{"children":"继承"}]," 是基于已有的类创建新类的语法，被继承的类称为 ",["$","strong","strong-1",{"children":"父类"}],"，创建的新类称为 ",["$","strong","strong-2",{"children":"子类"}],"。子类自动拥有父类相同的属性和方法。"]}]
25:["$","pre","pre-0",{"className":"$undefined","children":"$L32"}]
26:["$","blockquote","blockquote-0",{"style":{"marginBlock":"1rem","marginInline":0,"padding":"1rem","border":"1px solid var(--mui-palette-primary-main)","borderLeft":"3px solid var(--mui-palette-primary-main)"},"children":["\n","$L33","\n"]}]
27:["$","$L21","p-1",{"variant":"body1","className":"$undefined","sx":{"fontSize":"1rem","fontWeight":"normal","marginBlock":"8px"},"children":"例如："}]
28:["$","pre","pre-1",{"className":"$undefined","children":"$L34"}]
2a:["$","$L21","p-2",{"variant":"body1","className":"$undefined","sx":{"fontSize":"1rem","fontWeight":"normal","marginBlock":"8px"},"children":"子类可以重新定义父类的方法："}]
2b:["$","pre","pre-2",{"className":"$undefined","children":"$L35"}]
2c:["$","$L21","p-3",{"variant":"body1","className":"$undefined","sx":{"fontSize":"1rem","fontWeight":"normal","marginBlock":"8px"},"children":["这段代码中的抚摸函数 ","$L36"," 的形式参数 ","$L37"," 的类型是基类 ","$L38","，通过 ","$L39"," 调用 ","$L3a"," 时，会根据实际类型调用。"]}]
2d:["$","$L21","p-4",{"variant":"body1","className":"$undefined","sx":{"fontSize":"1rem","fontWeight":"normal","marginBlock":"8px"},"children":["这种以统一的接口实现不同行为的特性称为 ",["$","strong","strong-0",{"children":"多态（Polymorphism）"}],"。"]}]
2f:["$","$L21","p-5",{"variant":"body1","className":"$undefined","sx":{"fontSize":"1rem","fontWeight":"normal","marginBlock":"8px"},"children":["如果子类重写了构造函数，那么它需要在构造函数中调用父类的构造函数来初始化继承的属性。Python 中可以通过 ","$L3b"," 函数获取父类。"]}]
30:["$","pre","pre-3",{"className":"$undefined","children":"$L3c"}]
3d:I[8984,["364","static/chunks/364-ff5ef27fa9e98017.js","901","static/chunks/901-cde2f800a15dc459.js","725","static/chunks/725-b8819bbc1cbaf8c8.js","197","static/chunks/app/document/%5Blang%5D/%5Bcategory%5D/%5Bchapter%5D/%5Bdoc%5D/page-3b3979a612a3b818.js"],"default"]
32:["$","$L18","code-0",{"sx":{"marginBlock":"8px"},"children":["$","code",null,{"className":"language-python hljs","dangerouslySetInnerHTML":{"__html":"<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">类名</span>(<span class=\"hljs-title class_ inherited__\">父类名</span>):\n    <span class=\"hljs-keyword\">pass</span>\n"}}]}]
33:["$","$L21","p-0",{"variant":"body1","className":"$undefined","sx":{"fontSize":"1rem","fontWeight":"normal","marginBlock":"8px"},"children":"父类也称基类、超类，子类也称派生类。"}]
3e:T8bb,<span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>:
    <span class="hljs-string">"""
    宠物类
    """</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name:<span class="hljs-built_in">str</span></span>):
        <span class="hljs-string">"""
        构造函数

        参数：
            name(str):名字
        """</span>
        <span class="hljs-variable language_">self</span>.__name = name

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:
        <span class="hljs-string">"""
        name 方法，获取名字

        返回值:
            str:宠物的名字
        """</span>

        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.__name

<span class="hljs-comment"># 猫类继承宠物类</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Pet</span>):
    
    <span class="hljs-comment"># 添加额外的方法</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">catch_mouses</span>():
        <span class="hljs-keyword">pass</span>

<span class="hljs-comment"># 狗类继承宠物类</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Pet</span>):
    
    <span class="hljs-comment"># 添加额外的方法</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">guard_gates</span>():
        <span class="hljs-keyword">pass</span>

<span class="hljs-comment"># 创建对象，使用继承的构造函数</span>
tom = Cat(<span class="hljs-string">"Tom"</span>)
happy = Cat(<span class="hljs-string">"Happy"</span>)
spike = Dog(<span class="hljs-string">"Spike"</span>)

<span class="hljs-comment"># 调用继承的方法</span>
<span class="hljs-built_in">print</span>(tom.name())
<span class="hljs-built_in">print</span>(happy.name())
<span class="hljs-built_in">print</span>(spike.name())
34:["$","$L3d","code-0",{"lang":"zh","language":"python","code":"class Pet:\n    \"\"\"\n    宠物类\n    \"\"\"\n\n    def __init__(self, name:str):\n        \"\"\"\n        构造函数\n\n        参数：\n            name(str):名字\n        \"\"\"\n        self.__name = name\n\n    def name(self) -> str:\n        \"\"\"\n        name 方法，获取名字\n\n        返回值:\n            str:宠物的名字\n        \"\"\"\n\n        return self.__name\n\n# 猫类继承宠物类\nclass Cat(Pet):\n    \n    # 添加额外的方法\n    def catch_mouses():\n        pass\n\n# 狗类继承宠物类\nclass Dog(Pet):\n    \n    # 添加额外的方法\n    def guard_gates():\n        pass\n\n# 创建对象，使用继承的构造函数\ntom = Cat(\"Tom\")\nhappy = Cat(\"Happy\")\nspike = Dog(\"Spike\")\n\n# 调用继承的方法\nprint(tom.name())\nprint(happy.name())\nprint(spike.name())\n","highlight":"$3e","input":""}]
3f:T9f3,<span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>:
    <span class="hljs-string">"""
    宠物类
    """</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):
        <span class="hljs-string">"""
        speak 方法，说话
        """</span>
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"某种动物在说话"</span>)

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Pet</span>):
    <span class="hljs-string">"""
    猫类，继承宠物类
    """</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):
        <span class="hljs-string">"""
        speak 方法，说话
        """</span>
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"喵喵喵"</span>)

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Pet</span>):
    <span class="hljs-string">"""
    狗类，继承宠物类
    """</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):
        <span class="hljs-string">"""
        speak 方法，说话
        """</span>
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"汪汪汪"</span>)

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Rabbit</span>(<span class="hljs-title class_ inherited__">Pet</span>):
    <span class="hljs-string">"""
    兔子类，继承宠物类
    """</span>

<span class="hljs-comment"># 创建对象</span>
cat = Cat()
dog = Dog()
rabbit = Rabbit()

<span class="hljs-comment"># 调用 speak 方法</span>
cat.speak()         <span class="hljs-comment"># 调用 Cat 类重载后的 speak</span>
dog.speak()         <span class="hljs-comment"># 调用 Dog 类重载后的 speak</span>
rabbit.speak()      <span class="hljs-comment"># Rabbit 没有定义 speak，调用父类的 speak</span>

<span class="hljs-comment"># 抚摸宠物</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">fondle</span>(<span class="hljs-params">pet:Pet</span>):
    pet.speak()     <span class="hljs-comment"># 会根据实际类型调用</span>

<span class="hljs-comment"># 抚摸宠物</span>
fondle(cat)
fondle(dog)
fondle(rabbit)
35:["$","$L3d","code-0",{"lang":"zh","language":"python","code":"class Pet:\n    \"\"\"\n    宠物类\n    \"\"\"\n\n    def speak(self):\n        \"\"\"\n        speak 方法，说话\n        \"\"\"\n        print(\"某种动物在说话\")\n\nclass Cat(Pet):\n    \"\"\"\n    猫类，继承宠物类\n    \"\"\"\n\n    def speak(self):\n        \"\"\"\n        speak 方法，说话\n        \"\"\"\n        print(\"喵喵喵\")\n\nclass Dog(Pet):\n    \"\"\"\n    狗类，继承宠物类\n    \"\"\"\n\n    def speak(self):\n        \"\"\"\n        speak 方法，说话\n        \"\"\"\n        print(\"汪汪汪\")\n\nclass Rabbit(Pet):\n    \"\"\"\n    兔子类，继承宠物类\n    \"\"\"\n\n# 创建对象\ncat = Cat()\ndog = Dog()\nrabbit = Rabbit()\n\n# 调用 speak 方法\ncat.speak()         # 调用 Cat 类重载后的 speak\ndog.speak()         # 调用 Dog 类重载后的 speak\nrabbit.speak()      # Rabbit 没有定义 speak，调用父类的 speak\n\n# 抚摸宠物\ndef fondle(pet:Pet):\n    pet.speak()     # 会根据实际类型调用\n\n# 抚摸宠物\nfondle(cat)\nfondle(dog)\nfondle(rabbit)\n","highlight":"$3f","input":""}]
36:["$","code","code-0",{"style":{"color":"var(--mui-palette-text-primary)","background":"var(--mui-palette-action-selected)","fontSize":"0.8em","padding":"0.2em 4px 1px 4px","verticalAlign":"0.1em","border":"1px solid var(--mui-palette-background-paper)"},"children":"fondle"}]
37:["$","code","code-1",{"style":{"color":"var(--mui-palette-text-primary)","background":"var(--mui-palette-action-selected)","fontSize":"0.8em","padding":"0.2em 4px 1px 4px","verticalAlign":"0.1em","border":"1px solid var(--mui-palette-background-paper)"},"children":"pet"}]
38:["$","code","code-2",{"style":{"color":"var(--mui-palette-text-primary)","background":"var(--mui-palette-action-selected)","fontSize":"0.8em","padding":"0.2em 4px 1px 4px","verticalAlign":"0.1em","border":"1px solid var(--mui-palette-background-paper)"},"children":"Pet"}]
39:["$","code","code-3",{"style":{"color":"var(--mui-palette-text-primary)","background":"var(--mui-palette-action-selected)","fontSize":"0.8em","padding":"0.2em 4px 1px 4px","verticalAlign":"0.1em","border":"1px solid var(--mui-palette-background-paper)"},"children":"pet"}]
3a:["$","code","code-4",{"style":{"color":"var(--mui-palette-text-primary)","background":"var(--mui-palette-action-selected)","fontSize":"0.8em","padding":"0.2em 4px 1px 4px","verticalAlign":"0.1em","border":"1px solid var(--mui-palette-background-paper)"},"children":"speak"}]
3b:["$","code","code-0",{"style":{"color":"var(--mui-palette-text-primary)","background":"var(--mui-palette-action-selected)","fontSize":"0.8em","padding":"0.2em 4px 1px 4px","verticalAlign":"0.1em","border":"1px solid var(--mui-palette-background-paper)"},"children":"super"}]
40:T66f,<span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>:
    <span class="hljs-string">"""
    宠物类
    """</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name:<span class="hljs-built_in">str</span></span>):
        <span class="hljs-string">"""
        构造函数

        参数：
            name(str): 名字
        """</span>
        <span class="hljs-variable language_">self</span>.name = name

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Pet</span>):
    <span class="hljs-string">"""
    猫类，继承宠物类
    """</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name:<span class="hljs-built_in">str</span>, breed:<span class="hljs-built_in">str</span></span>):
        <span class="hljs-string">"""
        构造函数

        参数：
            name(str): 名字
            breed(str): 品种
        """</span>

        <span class="hljs-built_in">super</span>().__init__(name)      <span class="hljs-comment"># 调用父类的构造函数</span>

        <span class="hljs-variable language_">self</span>.breed = breed          <span class="hljs-comment"># 创建新的属性</span>

<span class="hljs-comment"># 创建对象</span>
cat = Cat(<span class="hljs-string">"Tom"</span>, <span class="hljs-string">"Chartreux"</span>)
<span class="hljs-built_in">print</span>(cat.name)
<span class="hljs-built_in">print</span>(cat.breed)
3c:["$","$L3d","code-0",{"lang":"zh","language":"python","code":"class Pet:\n    \"\"\"\n    宠物类\n    \"\"\"\n\n    def __init__(self, name:str):\n        \"\"\"\n        构造函数\n\n        参数：\n            name(str): 名字\n        \"\"\"\n        self.name = name\n\nclass Cat(Pet):\n    \"\"\"\n    猫类，继承宠物类\n    \"\"\"\n\n    def __init__(self, name:str, breed:str):\n        \"\"\"\n        构造函数\n\n        参数：\n            name(str): 名字\n            breed(str): 品种\n        \"\"\"\n\n        super().__init__(name)      # 调用父类的构造函数\n\n        self.breed = breed          # 创建新的属性\n\n# 创建对象\ncat = Cat(\"Tom\", \"Chartreux\")\nprint(cat.name)\nprint(cat.breed)\n","highlight":"$40","input":""}]
23:["$","$L21","h1-0",{"id":"2b8801","variant":"h1","className":"$undefined","sx":{"fontSize":"2.5rem","fontWeight":"bolder","marginBlock":"1rem"},"children":[["$","$L1a",null,{"sx":{"paddingRight":1},"href":"#2b8801","children":"#"}],"Python 的继承和多态"]}]
29:["$","$L21","h2-0",{"id":"8afe50","variant":"h2","className":"$undefined","sx":{"fontSize":"2.25rem","fontWeight":"bolder","marginBlock":"1rem"},"children":[["$","$L1a",null,{"sx":{"paddingRight":1},"href":"#8afe50","children":"#"}],"多态"]}]
2e:["$","$L21","h2-1",{"id":"73d1b1","variant":"h2","className":"$undefined","sx":{"fontSize":"2.25rem","fontWeight":"bolder","marginBlock":"1rem"},"children":[["$","$L1a",null,{"sx":{"paddingRight":1},"href":"#73d1b1","children":"#"}],"super"]}]
